{"version":3,"sources":["components/Nav.js","components/cats/CatList.js","components/cats/CatIndex.js","components/cats/Cats.js","components/dogs/DogIndex.js","components/dogs/Dogs.js","components/search/SearchIndex.js","components/search/Search.js","components/todo/TodoIndex.js","components/todo/ToDo.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Sitebar","Navbar","color","dark","expand","Nav","className","NavItem","to","CatList","props","console","log","cats","map","cat","CatIndex","state","breeds","this","Component","Cats","Container","DogIndex","useState","url","setUrl","onClick","fetch","then","res","ok","json","Error","networkError","message","jsonRes","src","alt","Dogs","href","SearchIndex","things","items","searchFunction","bind","setState","e","updateList","filter","item","toLowerCase","search","target","value","Input","type","placeholder","onChange","Search","toDoItems","CreateItem","preventDefault","refs","newItemInput","element","name","indexOf","alert","createItem","onSubmit","handleCreate","ref","ToDoListItem","editing","itemStyle","completed","cursor","onSaveClick","defaultValue","style","toggleComplete","onCancelClick","onEditClick","deleteItem","saveItem","editInput","renderName","renderButtons","ToDoList","index","renderItems","TodoHeader","TodoIndex","unshift","selectedItem","findItem","oldItem","newItem","splice","ToDo","Main","Fragment","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1c799cf9.chunk.js","sourcesContent":["import React from 'react';\nimport { Navbar, NavbarBrand, Nav, NavItem } from 'reactstrap';\nimport { Link } from 'react-router-dom';\n\nconst Sitebar = () => {\n    return (\n        <Navbar color=\"dark\" dark expand=\"md\">\n            <Nav className=\"ml-auto\">\n                <NavItem>\n                    <Link to=\"/cats\" className=\"site-link\">Cat Challenge</Link>\n                </NavItem>\n                <NavItem>\n                    <Link to=\"/search\" className=\"site-link\">Search Challenge</Link>\n                </NavItem>\n                <NavItem>\n                    <Link to=\"/dogs\" className=\"site-link\">Dog Challenge</Link>\n                </NavItem>\n                <NavItem>\n                    <Link to=\"/todo\" className=\"site-link\">ToDo Challenge</Link>\n                </NavItem>\n            </Nav>\n        </Navbar>\n    );\n};\n\nexport default Sitebar;","//This is a function component\n\nimport React from 'react';\n \nconst CatList = (props) => {\n  console.log(props.cats)\n  \n return (\n   <div>\n     {props.cats.map(cat => <li>{cat}</li> )}\n   </div>\n )\n}\n \nexport default CatList;","// This is a class component\n\nimport React, { Component } from 'react';\nimport CatList from './CatList';\n \nclass CatIndex extends Component {\n constructor(props){\n   super(props);\n   this.state = {\n     breeds: ['persian', 'siamese', 'maine coon', 'ragdoll', 'scottish fold', 'sphynx', 'british shorthair', 'bengal', 'american shorthair']\n   }\n }\n  render() {\n    return (\n      <div>\n        <CatList cats={this.state.breeds} />\n      </div>\n    );\n  }\n\n}\n export default CatIndex;","import React from 'react';\nimport CatIndex from './CatIndex'\nimport { Container } from 'reactstrap';\n \nconst Cats = () => {\n   return (\n     <Container className=\"App\">\n       <br/>\n       <h1 className=\"App-intro\">\n         To complete this challenge, complete and fix the existing code to have it do the following:\n       </h1>\n\n       <hr />\n         \n        <ul>\n         <li>Render the list of cat breeds to the screen</li>\n         <li>Use props correctly</li>\n         <li>Use .map() correctly</li>\n         <li>Ensure there are no errors</li>\n        </ul>\n        <hr />\n       <CatIndex />\n     </Container>\n   );\n\n}\n \nexport default Cats;","import React, {useState} from 'react'\n\n\n\n\n\nfunction DogIndex (){\n\n    const [url,setUrl] = useState('')\n\n    function fetch_data () {\n        \n        fetch('https://dog.ceo/api/breeds/image/random').then(res =>{\n            if(res.ok){\n                return res.json();\n            }\n            throw new Error('Request Failed')\n        },networkError=> console.log(networkError.message)\n        ).then(jsonRes=>{\n            setUrl(jsonRes.message)\n        })\n    }\n    \n    \n        return(\n            <div className=\"dog_main\">\n                <button onClick={fetch_data}>Generate Image!</button>\n                <h3>Smash the button to see dog pics.</h3>\n                <img src={url} alt=\"\"/>\n                \n            </div>\n            \n        )\n    \n    \n}\n\nexport default  DogIndex;","import React from 'react';\nimport {Container} from 'reactstrap';\nimport DogIndex from './DogIndex';\n\nconst Dogs = () => {\n\n  return (\n    <Container className=\"App\">\n      <br />\n      <h1 className=\"App-intro\">\n        For this challenge, write the logic to accomplish the following:\n      </h1>\n      <hr/>\n      <ul>\n        <li>Fetch a random image from this api: <a href=\"https://dog.ceo/dog-api/\">here</a></li>\n        <li>Save this image URL to the state of the DogIndex component</li>\n        <li>Render the image to the screen</li>\n        <li>Have a button that fetches a new image</li>\n        <li>Make sure to include some good practice error handling</li>\n      </ul>\n      <hr />\n      <DogIndex/>\n    </Container>\n  );\n\n}\n\nexport default Dogs;\n","import React, { Component} from 'react';\nimport {Input} from 'reactstrap';\n\n\nclass SearchIndex extends Component {\n    constructor() {\n        super();\n        this.state = {\n        things: [\n          'pen', \n          'marker', \n          'eraser',\n          'notebook', \n          'pencil', \n          'scissors', \n          'highlighter', \n          'stapler', \n          'paper clip', \n          'binder', \n          'hole punch', \n          'laminator', \n          'laminating sheets',\n          'protective sheets', \n          'index cards'\n        ],\n        items: []\n      };\n      this.searchFunction = this.searchFunction.bind(this);\n    }\n  \n    searchState() {\n      this.setState({\n          items: this.state.things\n      });\n    }\n\n    searchFunction(e){\n      let updateList = this.state.things;\n      updateList = updateList.filter(item => {\n        return item.toLowerCase().search(\n          e.target.value.toLowerCase()\n        ) !== -1;\n      });\n      this.setState({\n          items: updateList\n      });\n      console.log(updateList)\n    }\n    \n    render() {\n        return (\n            <div>\n                  <Input type = \"text\" placeholder='Search Here' onChange={this.searchFunction}/>\n                  <h3>Results:</h3>\n                  <ul>\n                    {this.state.items.map(item =>{\n                        return <li key = {item}>{item}</li>\n                    })}\n                  </ul>\n            </div>\n    );\n      \n  }\n\n}\nexport default SearchIndex;","import React from 'react';\nimport SearchIndex from './SearchIndex';\nimport { Container } from 'reactstrap';\n \nconst Search = () => {\n   return (\n     <Container className=\"App\">\n     <br />\n       <h1 className=\"App-intro\">\n     In this challenge your goal is to use the existing code to create the following: \n       </h1>\n       <hr />\n       <ul>\n         <li>\n           ability to accept a search term from a user\n         </li>\n         <li>\n            ability to filter the array in the state by that term\n         </li>\n         <li>\n            ability to display only the terms that match the search, or all if no search term is provided\n         </li>\n       </ul>\n       <hr />\n       <SearchIndex /> \n     </Container>\n   );\n\n}\n \nexport default Search;\n","import React,{Component} from 'react';\n\n\nconst toDoItems = [];\n  \n  class CreateItem extends Component {\n    handleCreate(e) {\n      e.preventDefault();\n      \n      if (!this.refs.newItemInput.value) {\n        alert('Please enter a task name.');\n        return;\n      } else if (this.props.toDoItems.map(element => element.name).indexOf(this.refs.newItemInput.value) !== -1) {\n        alert('This task already exists.');\n        this.refs.newItemInput.value = '';\n        return;\n      }\n      \n      this.props.createItem(this.refs.newItemInput.value);\n      this.refs.newItemInput.value = '';\n    }\n    \n    render() {\n      return (\n        <div className=\"create-new\">\n          <form onSubmit={this.handleCreate.bind(this)}>\n            <input type=\"text\" placeholder=\"New Task\" ref=\"newItemInput\" />\n            <button>Add</button>\n          </form>\n        </div>\n      );\n    }\n  }\n  \n  class ToDoListItem extends Component {\n    constructor(props) {\n      super(props);\n      \n      this.state = {\n        editing: false\n      };\n    }\n    \n    renderName() {\n      const itemStyle = {\n        'text-decoration': this.props.completed ? 'line-through' : 'none',\n        cursor: 'pointer'\n      };\n      \n      if(this.state.editing) {\n        return (\n            <form onSubmit={this.onSaveClick.bind(this)}>\n              <input type=\"text\" ref=\"editInput\" defaultValue={this.props.name} />\n            </form>\n        );\n      }\n      \n      return (\n        <span style={itemStyle} onClick={this.props.toggleComplete.bind(this, this.props.name)}>{this.props.name}</span>\n      );\n    }\n    \n    renderButtons() {\n      if (this.state.editing) {\n        return (\n          \n            <div>\n            <span>\n              <button onClick={this.onSaveClick.bind(this)}>Save</button>\n              <button onClick={this.onCancelClick.bind(this)}>Cancel</button>\n            </span>\n          </div>\n        \n          \n          \n        );\n      }\n      \n      return (\n        \n          <div>\n            <span>\n              <button onClick={this.onEditClick.bind(this)}>Edit</button>\n              <button onClick={this.props.deleteItem.bind(this, this.props.name)}>Delete</button>\n            </span>\n        </div>\n        \n        \n      \n      );\n    }\n    \n    onEditClick() {\n      this.setState({ editing: true });\n    }\n    \n    onCancelClick() {\n      this.setState({ editing: false });\n    }\n    \n    onSaveClick(e) {\n      e.preventDefault();\n      this.props.saveItem(this.props.name, this.refs.editInput.value);\n      this.setState({ editing: false });\n    }\n    \n    render() {\n      return (\n        \n          <div className=\"to-do-item\">\n            <span className=\"name\">{this.renderName()}</span>\n            <span className=\"actions\">{this.renderButtons()}</span>\n          </div>\n          \n        \n      );\n    }\n  }\n  \n  class ToDoList extends Component {\n    renderItems() {\n      return this.props.toDoItems.map((item, index) => <ToDoListItem key={index} {...item} {...this.props} />);\n    }\n    \n    render() {\n      return (\n        <div className=\"items-list\">\n          {this.renderItems()}\n        </div>\n      );\n    }\n  }\n  class TodoHeader extends Component {\n    render() {\n      return (\n        <div className=\"header\">\n        <h1>ToDo List</h1>\n      </div>\n      )\n    }\n  }\n  \n  class TodoIndex extends Component {\n    constructor(props) {\n      super(props);\n      \n      this.state = {\n        toDoItems\n      };\n    }\n    \n    createItem(item) {\n      this.state.toDoItems.unshift({\n        name: item,\n        completed: false\n      });\n      this.setState({\n        toDoItems: this.state.toDoItems\n      });\n    }\n    \n    findItem(item) {\n      return this.state.toDoItems.filter((element) => element.name === item)[0];\n    }\n    \n    toggleComplete(item) {\n      let selectedItem = this.findItem(item);\n      selectedItem.completed = !selectedItem.completed;\n      this.setState({ toDoItems: this.state.toDoItems });\n    }\n    \n    saveItem(oldItem, newItem) {\n      let selectedItem = this.findItem(oldItem);\n      selectedItem.name = newItem;\n      this.setState({ toDoItems: this.state.toDoItems });\n    }\n    \n    deleteItem(item) {\n      let index = this.state.toDoItems.map(element => element.name).indexOf(item);\n      this.state.toDoItems.splice(index, 1);\n      this.setState({ toDoItems: this.state.toDoItems });\n    }\n    \n    render() {\n      return (\n        <div className=\"to-do-app\">\n        <TodoHeader />\n        <CreateItem toDoItems={this.state.toDoItems} createItem={this.createItem.bind(this)} />\n        <ToDoList toDoItems={this.state.toDoItems} deleteItem={this.deleteItem.bind(this)} saveItem={this.saveItem.bind(this)} toggleComplete={this.toggleComplete.bind(this)} />\n        </div>\n      );\n    }\n  }\nexport default TodoIndex;","import React from 'react';\nimport {Container} from 'reactstrap';\nimport TodoIndex from './TodoIndex';\n\nconst ToDo = () => {\n  return(\n    <Container className=\"App\">\n      <br />\n        <h1 className=\"App-intro\">\n          In this challenge your goal is to create a to do list: \n        </h1>\n        <hr />\n        <ul>\n          <li>\n            ability to accept a task from a user\n          </li>\n          <li>\n            ability to add this to the state\n          </li>\n          <li>\n            ability to display all of the tasks\n          </li>\n          <li>\n            ability to evaluated if a task was completed and update the state\n          </li>\n        </ul>\n        <hr />\n        <TodoIndex/> \n      </Container>\n  );\n};\n\nexport default ToDo","import React from 'react';\nimport Nav from './Nav';\nimport Cats from './cats/Cats';\nimport Dogs from './dogs/Dogs';\nimport Search from './search/Search';\nimport ToDo from './todo/ToDo';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nconst Main = () => {\n\n    return (\n        <React.Fragment>\n            <Router>\n                <Nav />\n                <Switch>\n                    <Route exact path=\"/cats\" component={ Cats } />\n                    <Route exact path=\"/search\" component={ Search } />\n                    <Route exact path=\"/dogs\" component={ Dogs } />\n                    <Route exact path=\"/todo\" component={ ToDo } />\n                </Switch>\n            </Router>\n        </React.Fragment>\n    )\n}\n\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Main />\n    </React.Fragment>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}